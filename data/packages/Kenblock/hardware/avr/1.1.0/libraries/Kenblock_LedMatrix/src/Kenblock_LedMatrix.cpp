/**
 * \著作权 Copyright (C), 2016-2020, LZRobot
 * @名称：  Kenblock_LedMatrix.cpp
 * @作者：  Kenblock
 * @版本：  V0.1.0
 * @时间：  2017/07/21
 * @描述：  16*16 LED点阵模块的驱动。
 *
 * \说明
 * 		16*16 LED点阵模块的驱动。点阵模块为共阴点阵，控制芯片为MAX7219。
 * 		（90°显示时数据更新会变慢。）
 * \方法列表
 * 
 *    1.    void 	LedMatrix::setPin(int16_t dataPin, int16_t clkPin, int16_t csPin, int16_t Num);
 *    2.    void 	LedMatrix::setPin(uint8_t port, int16_t Num); 
 *    3.    int16_t LedMatrix::getDeviceCount();
 *    4.    void 	LedMatrix::shutDown(int16_t addr, bool _status);
 *    5.    void 	LedMatrix::setScanLimit(int16_t addr, int16_t limit);
 *    6.    void 	LedMatrix::setIntensity(int16_t addr, int16_t intensity);
 *    7.    void 	LedMatrix::setDisplayType(int8_t angleValue,int8_t sizeValue);
 *
 *    8.    void 	LedMatrix::clearDisplay(int16_t addr);
 *    9.    void 	LedMatrix::setLed(int16_t addr, int16_t row, int16_t col, boolean state);
 *    10.   void 	LedMatrix::setRow(int16_t addr, int16_t row, uint8_t value);
 *    11.   void 	LedMatrix::setColumn(int16_t addr, int16_t col, uint8_t value);
 *    12.   void 	LedMatrix::display(uint8_t addr,uint8_t ch) ;
 *    13.   void 	LedMatrix::display(uint8_t addr,uint8_t ch[]) ;
 *    14.   void 	LedMatrix::display(uint8_t addr,uint8_t (*FData)[8]);
 *
 *    15.   void 	LedMatrix::spiTransfer(int16_t addr, uint8_t opcode, uint8_t data);
 *
 * \修订历史
 * `<Author>`      `<Time>`        `<Version>`        `<Descr>`
 *  KING            2017/07/21      0.1.0              新建库文件。
 *  
 * \示例
 *  
 *    1.   DisplayTest.ino
 *    2.   CascadedDisplay.ino
 *    3.   EmoticonDisplay.ino
 */

#include "Kenblock_LedMatrix.h"

//MAX7221/MAX7219 操作码
#define OP_NOOP   	0x00
#define OP_DIGIT0 	0x01
#define OP_DIGIT1 	0x02
#define OP_DIGIT2 	0x03
#define OP_DIGIT3 	0x04
#define OP_DIGIT4 	0x05
#define OP_DIGIT5 	0x06
#define OP_DIGIT6 	0x07
#define OP_DIGIT7 	0x08
#define OP_DECODEMODE  0x09		//译码控制寄存器
#define OP_INTENSITY   0x0A		//亮度控制寄存器
#define OP_SCANLIMIT   0x0B		//扫描界限寄存器
#define OP_shutDown    0x0C		//关断模式寄存器
#define OP_DISPLAYTEST 0x0F		//测试控制寄存器


uint8_t DisplayData_PD5_1[][4][8]={
	{{7, 31, 63, 127, 115, 225, 225, 243},{255, 255, 224, 96, 127, 63, 31, 7},{224, 248, 252, 254, 206, 135, 135, 207},{255, 255, 7, 6, 254, 252, 248, 224}}, //
	{{7, 31, 63, 127, 115, 225, 225, 243},{255, 255, 224, 96, 112, 60, 31, 7},{224, 248, 252, 254, 206, 135, 135, 207},{255, 255, 7, 6, 14, 60, 248, 224}}, //开心
	{{7, 31, 63, 126, 127, 255, 255, 255},{255, 255, 255, 127, 127, 63, 31, 7},{224, 248, 124, 62, 126, 255, 252, 224},{128, 192, 224, 240, 248, 252, 248, 224}},

};
 
const uint8_t F8X16[][8] PROGMEM =
{
	 // (0) !(1) "(2) #(3) $(4) %(5) &(6) '(7)
	 // ((8) )(9) *(10) +(11) ,(12) -(13) .(14) /(15)
	 // 0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23)
	 // 8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
	 // @(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39)
	 // H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
	 // P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55)
	 // X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
	 // `(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71)
	 // h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
	 // p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87)
	 // x(88) y(89) z(90) {(91) |(92) }(93) ~(94)

	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
	{0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10},
	{0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00},/*"!",1*/
	{0x00,0x12,0x24,0x24,0x48,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*""",2*/
	{0x00,0x00,0x00,0x12,0x12,0x12,0x7E,0x24},
	{0x24,0x24,0x7E,0x24,0x24,0x24,0x00,0x00},/*"#",3*/
	{0x00,0x00,0x08,0x3C,0x4A,0x4A,0x48,0x38},
	{0x0C,0x0A,0x0A,0x4A,0x4A,0x3C,0x08,0x08},/*"$",4*/
	{0x00,0x00,0x00,0x44,0xA4,0xA8,0xA8,0xB0},
	{0x54,0x1A,0x2A,0x2A,0x4A,0x44,0x00,0x00},/*"%",5*/
	{0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x50},
	{0x6E,0xA4,0x94,0x98,0x89,0x76,0x00,0x00},/*"&",6*/
	{0x00,0x60,0x20,0x20,0x40,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
	{0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10},
	{0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00},/*"(",8*/
	{0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08},
	{0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00},/*")",9*/
	{0x00,0x00,0x00,0x00,0x10,0x10,0xD6,0x38},
	{0x38,0xD6,0x10,0x10,0x00,0x00,0x00,0x00},/*"*",10*/
	{0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08},
	{0x7F,0x08,0x08,0x08,0x00,0x00,0x00,0x00},/*"+",11*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x60,0x20,0x20,0x40},/*",",12*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"-",13*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00},/*".",14*/
	{0x00,0x00,0x02,0x04,0x04,0x04,0x08,0x08},
	{0x10,0x10,0x10,0x20,0x20,0x40,0x40,0x00},/*"/",15*/
	{0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42},
	{0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00},/*"0",16*/
	{0x00,0x00,0x00,0x08,0x38,0x08,0x08,0x08},
	{0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*"1",17*/
	{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x02},
	{0x04,0x08,0x10,0x20,0x42,0x7E,0x00,0x00},/*"2",18*/
	{0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04},
	{0x18,0x04,0x02,0x42,0x42,0x3C,0x00,0x00},/*"3",19*/
	{0x00,0x00,0x00,0x04,0x0C,0x0C,0x14,0x24},
	{0x24,0x44,0x7F,0x04,0x04,0x1F,0x00,0x00},/*"4",20*/
	{0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x78},
	{0x44,0x02,0x02,0x42,0x44,0x38,0x00,0x00},/*"5",21*/
	{0x00,0x00,0x00,0x18,0x24,0x40,0x40,0x5C},
	{0x62,0x42,0x42,0x42,0x22,0x1C,0x00,0x00},/*"6",22*/
	{0x00,0x00,0x00,0x7E,0x42,0x04,0x04,0x08},
	{0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00},/*"7",23*/
	{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24},
	{0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00},/*"8",24*/
	{0x00,0x00,0x00,0x38,0x44,0x42,0x42,0x42},
	{0x46,0x3A,0x02,0x02,0x24,0x18,0x00,0x00},/*"9",25*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18},
	{0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00},/*":",26*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10},
	{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x10},/*";",27*/
	{0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20},
	{0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00},/*"<",28*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00},
	{0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00},/*"=",29*/
	{0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04},
	{0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00},/*">",30*/
	{0x00,0x00,0x00,0x3C,0x42,0x42,0x62,0x04},
	{0x08,0x08,0x08,0x00,0x18,0x18,0x00,0x00},/*"?",31*/
	{0x00,0x00,0x00,0x38,0x44,0x5A,0xAA,0xAA},
	{0xAA,0xAA,0xAA,0x5C,0x42,0x3C,0x00,0x00},/*"@",32*/
	{0x00,0x00,0x00,0x10,0x10,0x18,0x28,0x28},
	{0x24,0x3C,0x44,0x42,0x42,0xE7,0x00,0x00},/*"A",33*/
	{0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78},
	{0x44,0x42,0x42,0x42,0x44,0xF8,0x00,0x00},/*"B",34*/
	{0x00,0x00,0x00,0x3E,0x42,0x42,0x80,0x80},
	{0x80,0x80,0x80,0x42,0x44,0x38,0x00,0x00},/*"C",35*/
	{0x00,0x00,0x00,0xF8,0x44,0x42,0x42,0x42},
	{0x42,0x42,0x42,0x42,0x44,0xF8,0x00,0x00},/*"D",36*/
	{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78},
	{0x48,0x48,0x40,0x42,0x42,0xFC,0x00,0x00},/*"E",37*/
	{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78},
	{0x48,0x48,0x40,0x40,0x40,0xE0,0x00,0x00},/*"F",38*/
	{0x00,0x00,0x00,0x3C,0x44,0x44,0x80,0x80},
	{0x80,0x8E,0x84,0x44,0x44,0x38,0x00,0x00},/*"G",39*/
	{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42},
	{0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*"H",40*/
	{0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10},
	{0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*"I",41*/
	{0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08},
	{0x08,0x08,0x08,0x08,0x08,0x08,0x88,0xF0},/*"J",42*/
	{0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70},
	{0x50,0x48,0x48,0x44,0x44,0xEE,0x00,0x00},/*"K",43*/
	{0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40},
	{0x40,0x40,0x40,0x40,0x42,0xFE,0x00,0x00},/*"L",44*/
	{0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x6C},
	{0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},/*"M",45*/
	{0x00,0x00,0x00,0xC7,0x62,0x62,0x52,0x52},
	{0x4A,0x4A,0x4A,0x46,0x46,0xE2,0x00,0x00},/*"N",46*/
	{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82},
	{0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},/*"O",47*/
	{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x42},
	{0x7C,0x40,0x40,0x40,0x40,0xE0,0x00,0x00},/*"P",48*/
	{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82},
	{0x82,0x82,0x82,0xB2,0x4C,0x38,0x06,0x00},/*"Q",49*/
	{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x7C},
	{0x48,0x48,0x44,0x44,0x42,0xE3,0x00,0x00},/*"R",50*/
	{0x00,0x00,0x00,0x3E,0x42,0x42,0x40,0x20},
	{0x18,0x04,0x02,0x42,0x42,0x7C,0x00,0x00},/*"S",51*/
	{0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10},
	{0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},/*"T",52*/
	{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42},
	{0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*"U",53*/
	{0x00,0x00,0x00,0xE7,0x42,0x42,0x44,0x24},
	{0x24,0x28,0x28,0x18,0x10,0x10,0x00,0x00},/*"V",54*/
	{0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54},
	{0x54,0x6C,0x28,0x28,0x28,0x28,0x00,0x00},/*"W",55*/
	{0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18},
	{0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00},/*"X",56*/
	{0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28},
	{0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},/*"Y",57*/
	{0x00,0x00,0x00,0x7E,0x84,0x04,0x08,0x08},
	{0x10,0x20,0x20,0x42,0x42,0xFC,0x00,0x00},/*"Z",58*/
	{0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10},
	{0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00},/*"[",59*/
	{0x00,0x00,0x40,0x20,0x20,0x20,0x10,0x10},
	{0x10,0x08,0x08,0x04,0x04,0x04,0x02,0x02},/*"\",60*/
	{0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08},
	{0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00},/*"]",61*/
	{0x00,0x18,0x24,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},/*"_",63*/
	{0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38},
	{0x44,0x0C,0x34,0x44,0x4C,0x36,0x00,0x00},/*"a",65*/
	{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x58},
	{0x64,0x42,0x42,0x42,0x64,0x58,0x00,0x00},/*"b",66*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C},
	{0x22,0x40,0x40,0x40,0x22,0x1C,0x00,0x00},/*"c",67*/
	{0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x3E},
	{0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00},/*"d",68*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C},
	{0x42,0x42,0x7E,0x40,0x42,0x3C,0x00,0x00},/*"e",69*/
	{0x00,0x00,0x00,0x00,0x0C,0x12,0x10,0x7C},
	{0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*"f",70*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E},
	{0x44,0x44,0x38,0x40,0x3C,0x42,0x42,0x3C},/*"g",71*/
	{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x5C},
	{0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*"h",72*/
	{0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x70},
	{0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*"i",73*/
	{0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x1C},
	{0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x78},/*"j",74*/
	{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x4E},
	{0x48,0x50,0x70,0x48,0x44,0xEE,0x00,0x00},/*"k",75*/
	{0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10},
	{0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*"l",76*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE},
	{0x49,0x49,0x49,0x49,0x49,0xED,0x00,0x00},/*"m",77*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC},
	{0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*"n",78*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C},
	{0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*"o",79*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8},
	{0x64,0x42,0x42,0x42,0x64,0x58,0x40,0xE0},/*"p",80*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A},
	{0x26,0x42,0x42,0x42,0x26,0x1A,0x02,0x07},/*"q",81*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE},
	{0x32,0x20,0x20,0x20,0x20,0xF8,0x00,0x00},/*"r",82*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E},
	{0x42,0x40,0x3C,0x02,0x42,0x7C,0x00,0x00},/*"s",83*/
	{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x7C},
	{0x10,0x10,0x10,0x10,0x12,0x0C,0x00,0x00},/*"t",84*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC6},
	{0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00},/*"u",85*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE},
	{0x44,0x44,0x28,0x28,0x10,0x10,0x00,0x00},/*"v",86*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB},
	{0x89,0x4A,0x5A,0x54,0x24,0x24,0x00,0x00},/*"w",87*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76},
	{0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00},/*"x",88*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7},
	{0x42,0x24,0x24,0x18,0x18,0x10,0x10,0x60},/*"y",89*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E},
	{0x44,0x08,0x10,0x10,0x22,0x7E,0x00,0x00},/*"z",90*/
	{0x00,0x03,0x04,0x04,0x04,0x04,0x04,0x04},
	{0x08,0x04,0x04,0x04,0x04,0x04,0x03,0x00},/*"{",91*/
	{0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},
	{0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},/*"|",92*/
	{0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x20},
	{0x10,0x20,0x20,0x20,0x20,0x20,0xC0,0x00},/*"}",93*/
	{0x20,0x5A,0x04,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"~",94*/

};

const uint8_t F8X8[][8] PROGMEM =
{
	// (0) !(1) "(2) #(3) $(4) %(5) &(6) '(7)
	// ((8) )(9) *(10) +(11) ,(12) -(13) .(14) /(15)
	// 0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23)
	// 8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
	// @(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39)
	// H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
	// P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55)
	// X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
	// `(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71)
	// h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
	// p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87)
	// x(88) y(89) z(90) {(91) |(92) }(93) ~(94)

	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
	{0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00},/*"!",1*/
	{0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00},/*""",2*/
	{0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00},/*"#",3*/
	{0x10,0x38,0x50,0x70,0x28,0x28,0x70,0x00},/*"$",4*/
	{0x00,0x68,0x68,0x10,0x20,0x58,0x58,0x00},/*"%",5*/
	{0x30,0x28,0x30,0x70,0x48,0x48,0x30,0x00},/*"&",6*/
	{0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
	{0x10,0x20,0x20,0x20,0x20,0x20,0x10,0x00},/*"(",8*/
	{0x20,0x10,0x10,0x10,0x10,0x10,0x20,0x00},/*")",9*/
	{0x00,0x20,0x70,0x70,0x70,0x20,0x00,0x00},/*"*",10*/
	{0x00,0x20,0x20,0x70,0x20,0x20,0x00,0x00},/*"+",11*/
	{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00},/*",",12*/
	{0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00},/*"-",13*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00},/*".",14*/
	{0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x00},/*"/",15*/
	{0x30,0x48,0x48,0x48,0x48,0x48,0x30,0x00},/*"0",16*/
	{0x20,0x60,0x20,0x20,0x20,0x20,0x70,0x00},/*"1",17*/
	{0x30,0x48,0x08,0x10,0x20,0x40,0x78,0x00},/*"2",18*/
	{0x30,0x48,0x08,0x30,0x08,0x48,0x30,0x00},/*"3",19*/
	{0x10,0x30,0x30,0x50,0x50,0x78,0x10,0x00},/*"4",20*/
	{0x78,0x40,0x40,0x70,0x08,0x08,0x70,0x00},/*"5",21*/
	{0x30,0x48,0x40,0x70,0x48,0x48,0x30,0x00},/*"6",22*/
	{0x78,0x48,0x08,0x10,0x20,0x20,0x20,0x00},/*"7",23*/
	{0x30,0x48,0x48,0x30,0x48,0x48,0x30,0x00},/*"8",24*/
	{0x30,0x48,0x48,0x38,0x08,0x48,0x30,0x00},/*"9",25*/
	{0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00},/*":",26*/
	{0x00,0x00,0x20,0x00,0x00,0x20,0x40,0x00},/*";",27*/
	{0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x00},/*"<",28*/
	{0x00,0x00,0x78,0x00,0x78,0x00,0x00,0x00},/*"=",29*/
	{0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00},/*">",30*/
	{0x30,0x48,0x08,0x10,0x20,0x00,0x20,0x00},/*"?",31*/
	{0x30,0x48,0x48,0x58,0x28,0x28,0x38,0x00},/*"@",32*/
	{0x30,0x48,0x48,0x48,0x78,0x48,0x48,0x00},/*"A",33*/
	{0x70,0x48,0x48,0x70,0x48,0x48,0x70,0x00},/*"B",34*/
	{0x30,0x48,0x40,0x40,0x40,0x48,0x30,0x00},/*"C",35*/
	{0x70,0x48,0x48,0x48,0x48,0x48,0x70,0x00},/*"D",36*/
	{0x78,0x40,0x40,0x70,0x40,0x40,0x78,0x00},/*"E",37*/
	{0x78,0x40,0x40,0x70,0x40,0x40,0x40,0x00},/*"F",38*/
	{0x30,0x48,0x40,0x58,0x48,0x48,0x30,0x00},/*"G",39*/
	{0x48,0x48,0x48,0x78,0x48,0x48,0x48,0x00},/*"H",40*/
	{0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00},/*"I",41*/
	{0x08,0x08,0x08,0x08,0x48,0x48,0x30,0x00},/*"J",42*/
	{0x48,0x48,0x50,0x60,0x50,0x48,0x48,0x00},/*"K",43*/
	{0x40,0x40,0x40,0x40,0x40,0x40,0x78,0x00},/*"L",44*/
	{0x48,0x78,0x78,0x48,0x48,0x48,0x48,0x00},/*"M",45*/
	{0x48,0x68,0x68,0x58,0x58,0x48,0x48,0x00},/*"N",46*/
	{0x78,0x48,0x48,0x48,0x48,0x48,0x78,0x00},/*"O",47*/
	{0x70,0x48,0x48,0x70,0x40,0x40,0x40,0x00},/*"P",48*/
	{0x30,0x48,0x48,0x48,0x68,0x58,0x38,0x00},/*"Q",49*/
	{0x70,0x48,0x48,0x70,0x60,0x50,0x48,0x00},/*"R",50*/
	{0x30,0x48,0x40,0x30,0x08,0x48,0x30,0x00},/*"S",51*/
	{0x78,0x20,0x20,0x20,0x20,0x20,0x20,0x00},/*"T",52*/
	{0x48,0x48,0x48,0x48,0x48,0x48,0x30,0x00},/*"U",53*/
	{0x48,0x48,0x48,0x48,0x30,0x30,0x30,0x00},/*"V",54*/
	{0x48,0x48,0x48,0x48,0x78,0x78,0x48,0x00},/*"W",55*/
	{0x48,0x48,0x30,0x30,0x30,0x48,0x48,0x00},/*"X",56*/
	{0x88,0x88,0x50,0x20,0x20,0x20,0x20,0x00},/*"Y",57*/
	{0x78,0x08,0x10,0x30,0x20,0x40,0x78,0x00},/*"Z",58*/
	{0x30,0x20,0x20,0x20,0x20,0x20,0x30,0x00},/*"[",59*/
	{0x80,0x80,0x40,0x40,0x20,0x20,0x10,0x00},/*"\",60*/
	{0x30,0x10,0x10,0x10,0x10,0x10,0x30,0x00},/*"]",61*/
	{0x20,0x50,0x00,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
	{0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00},/*"_",63*/
	{0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
	{0x00,0x00,0x00,0x38,0x38,0x48,0x38,0x00},/*"a",65*/
	{0x40,0x40,0x40,0x70,0x48,0x48,0x70,0x00},/*"b",66*/
	{0x00,0x00,0x00,0x38,0x40,0x40,0x38,0x00},/*"c",67*/
	{0x08,0x08,0x08,0x38,0x48,0x48,0x38,0x00},/*"d",68*/
	{0x00,0x00,0x00,0x30,0x78,0x40,0x30,0x00},/*"e",69*/
	{0x00,0x10,0x20,0x78,0x20,0x20,0x20,0x00},/*"f",70*/
	{0x00,0x00,0x00,0x38,0x48,0x38,0x08,0x30},/*"g",71*/
	{0x40,0x40,0x40,0x70,0x50,0x50,0x50,0x00},/*"h",72*/
	{0x00,0x00,0x20,0x00,0x20,0x20,0x20,0x00},/*"i",73*/
	{0x00,0x00,0x10,0x00,0x10,0x10,0x10,0x60},/*"j",74*/
	{0x40,0x40,0x40,0x58,0x60,0x50,0x48,0x00},/*"k",75*/
	{0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x00},/*"l",76*/
	{0x00,0x00,0x00,0x78,0x58,0x58,0x58,0x00},/*"m",77*/
	{0x00,0x00,0x00,0x70,0x48,0x48,0x48,0x00},/*"n",78*/
	{0x00,0x00,0x00,0x30,0x48,0x48,0x30,0x00},/*"o",79*/
	{0x00,0x00,0x00,0x70,0x48,0x48,0x70,0x40},/*"p",80*/
	{0x00,0x00,0x00,0x38,0x48,0x48,0x38,0x08},/*"q",81*/
	{0x00,0x00,0x00,0x58,0x60,0x40,0x40,0x00},/*"r",82*/
	{0x00,0x00,0x00,0x38,0x60,0x18,0x70,0x00},/*"s",83*/
	{0x00,0x00,0x20,0x70,0x20,0x20,0x30,0x00},/*"t",84*/
	{0x00,0x00,0x00,0x48,0x48,0x48,0x38,0x00},/*"u",85*/
	{0x00,0x00,0x00,0x48,0x48,0x30,0x30,0x00},/*"v",86*/
	{0x00,0x00,0x00,0xA8,0xA8,0x70,0x50,0x00},/*"w",87*/
	{0x00,0x00,0x00,0x48,0x30,0x30,0x48,0x00},/*"x",88*/
	{0x00,0x00,0x00,0x48,0x48,0x38,0x08,0x30},/*"y",89*/
	{0x00,0x00,0x00,0x78,0x10,0x20,0x78,0x00},/*"z",90*/
	{0x30,0x20,0x20,0x40,0x20,0x20,0x30,0x00},/*"{",91*/
	{0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00},/*"|",92*/
	{0x60,0x20,0x20,0x10,0x20,0x20,0x60,0x00},/*"}",93*/
	{0x28,0x50,0x00,0x00,0x00,0x00,0x00,0x00},/*"~",94*/

};

/**
 * \函数：LedMatrix
 * \说明：创建新的控制量，不做任何操作
 * \输入参数：无
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
LedMatrix::LedMatrix(void) 
{

}

/**
 * \函数：LedMatrix
 * \说明：创建新的控制量，替代构造函数，映射点阵模块引脚设置函数，设置控制引脚、点阵数量
 * \输入参数：
 * 		dataPin - 点阵模块 DIN 引脚
 *   	clockPin - 点阵模块 CLK 引脚
 *   	csPin - 点阵模块 CS 引脚
 *   	Num - 16*16点阵模块模块的数量
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */	
LedMatrix::LedMatrix(int16_t dataPin, int16_t clkPin, int16_t csPin, int16_t Num) 
{
    SPI_MOSI= dataPin;
    SPI_CLK = clkPin;
    SPI_CS  = csPin;
	
    if(Num<=0 || Num > MatrixMaxNum )
        Num= MatrixMaxNum;
    _maxDevices = Num * 4;
	
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
	
    for(int16_t i=0;i<64;i++) 
        _status[i]=0x00;
    for(int16_t i=0;i<_maxDevices;i++) 
	{
        spiTransfer(i,OP_DISPLAYTEST,0);//测试
        setScanLimit(i,7);				//设置扫描界限，此处设置为7，即扫描digits0-7
        spiTransfer(i,OP_DECODEMODE,0);	//设置译码方式，此处为不译码方式
        clearDisplay(i);				//清除显示
        shutDown(i,true);				//设置为正常工作状态
    }
}

/**
 * \函数：LedMatrix
 * \说明：创建新的控制量，替代构造函数，映射点阵模块引脚设置函数，设置控制引脚、点阵数量
 * \输入参数：
 * 	 port - Ex_Quadruple_Digital  四路数字接口（6P接口：PD5、PD6）
 *   	d1 - 点阵模块 DIN 引脚 （10、2）
 *   	d2 - 点阵模块 CS 引脚 （11、3）
 *   	d3 - 点阵模块 CLK 引脚 （12、8）
 *   	d4 - NC 空
 *   	Num - 16*16点阵模块模块的数量
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */	
LedMatrix::LedMatrix(uint8_t port, int16_t Num)
{
	SPI_MOSI = Ex_Quadruple_Digital[port].d1;
    SPI_CLK  = Ex_Quadruple_Digital[port].d3;
    SPI_CS   = Ex_Quadruple_Digital[port].d2;
	
    if(Num<=0 || Num > MatrixMaxNum )
        Num = MatrixMaxNum;
    _maxDevices = Num * 4;
	
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
	
    for(int16_t i=0;i<64;i++) 
        _status[i]=0x00;
    for(int16_t i=0;i<_maxDevices;i++) 
	{
        spiTransfer(i,OP_DISPLAYTEST,0);//测试
        setScanLimit(i,7);				//设置扫描界限，此处设置为7，即扫描digits0-7
        spiTransfer(i,OP_DECODEMODE,0);	//设置译码方式，此处为不译码方式
        clearDisplay(i);				//清除显示
        shutDown(i,true);				//设置为正常工作状态
    }
}

/**
 * \函数：setpin
 * \说明：点阵模块引脚设置函数，设置控制引脚、点阵数量
 * \输入参数：
 * 		dataPin - 点阵模块 DIN 引脚
 *   	clockPin - 点阵模块 CLK 引脚
 *   	csPin - 点阵模块 CS 引脚
 *   	Num - 16*16点阵模块模块的数量
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */	
void LedMatrix::setPin(int16_t dataPin, int16_t clkPin, int16_t csPin, int16_t Num)
{
    SPI_MOSI= dataPin;
    SPI_CLK = clkPin;
    SPI_CS  = csPin;
	
    if(Num<=0 || Num > MatrixMaxNum )
        Num = MatrixMaxNum;
    _maxDevices = Num * 4;
	
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
	
    for(int16_t i=0;i<64;i++) 
        _status[i]=0x00;
    for(int16_t i=0;i<_maxDevices;i++) 
	{
        spiTransfer(i,OP_DISPLAYTEST,0);//测试
        setScanLimit(i,7);				//设置扫描界限，此处设置为7，即扫描digits0-7
        spiTransfer(i,OP_DECODEMODE,0);	//设置译码方式，此处为不译码方式
        clearDisplay(i);				//清除显示
        shutDown(i,true);				//设置为正常工作状态
    }	
}


/**
 * \函数：setpin
 * \说明：点阵模块引脚设置函数，设置控制端口、点阵数量
 * \输入参数：
 * 	 port - Ex_Quadruple_Digital  四路数字接口（6P接口：PD5、PD6）
 *   	d1 - 点阵模块 DIN 引脚 （10、2）
 *   	d2 - 点阵模块 CS 引脚 （11、3）
 *   	d3 - 点阵模块 CLK 引脚 （12、8）
 *   	d4 - NC 空
 *   	Num - 16*16点阵模块模块的数量
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */	
void LedMatrix::setPin(uint8_t port, int16_t Num)
{
	SPI_MOSI = Ex_Quadruple_Digital[port].d1;
    SPI_CLK  = Ex_Quadruple_Digital[port].d3;
    SPI_CS   = Ex_Quadruple_Digital[port].d2;
	
    if(Num<=0 || Num> MatrixMaxNum )
        Num = MatrixMaxNum;
    _maxDevices = Num * 4;
	
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
	
    for(int16_t i=0;i<64;i++) 
        _status[i]=0x00;
    for(int16_t i=0;i<_maxDevices;i++) 
	{
        spiTransfer(i,OP_DISPLAYTEST,0);//测试
        setScanLimit(i,7);				//设置扫描界限，此处设置为7，即扫描digits0-7
        spiTransfer(i,OP_DECODEMODE,0);	//设置译码方式，此处为不译码方式
        clearDisplay(i);				//清除显示
        shutDown(i,true);				//设置为正常工作状态
    }
}

/**
 * \函数：getDeviceCount
 * \说明：获取连接的 LED点阵 8*8单元的数量
 * \输入参数：无
 * \输出参数：点阵模块的最大数量
 * \返回值：无
 * \其他：无
 */
int16_t LedMatrix::getDeviceCount() 
{
    return _maxDevices;
}


/**
 * \函数：shutDown
 * \说明：设置点阵模块关断模式 
 * \输入参数：
 * 		addr - 点阵模块的地址
 *   	_status - 如果值为 true ，为正常工作状态模式；设置为 false 则为掉电模式，掉电模式可以节省电源。		 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::shutDown(int16_t addr, bool b) 
{
    if(addr<0 || addr>=_maxDevices)
        return;
    if(b)
        spiTransfer(addr, OP_shutDown,0);
    else
        spiTransfer(addr, OP_shutDown,1);
}

/**
 * \函数：setScanLimit
 * \说明：设置点阵模块行（或者 列）的扫描界限
 * \输入参数：
 * 		addr - 点阵模块的地址
 *   	limit - 显示的点的数量（0~7）
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::setScanLimit(int16_t addr, int16_t limit) 
{
    if(addr<0 || addr>=_maxDevices)
        return;
    if(limit>=0 && limit<8)
        spiTransfer(addr, OP_SCANLIMIT,limit);
}

/**
 * \函数：setIntensity
 * \说明：设置点阵模块的亮度
 * \输入参数：
 * 		addr - 点阵模块的地址
 *   	intensity - 显示的亮度值（0~15）		 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::setIntensity(int16_t addr, int16_t intensity) 
{
    if(addr<0 || addr>=_maxDevices)
        return;
    if(intensity>=0 && intensity<16)	
        spiTransfer(addr, OP_INTENSITY,intensity);
}


/**
 * \函数：setDisplayType
 * \说明：显示模式设置。大小：8*8显示（主要显示字符、数字）; 8*16显示 （显示字符）; 16*16 显示汉字、图像。
 * 						角度：0°、90°
 * \输入参数：
 * 		angleValue - 0:0°显示; 		1:90°显示; 	
 * 		sizeValue  - 0:8*8显示;  	1:8*16显示 ;  	2:16*16 显示汉字、图像。 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::setDisplayType(int8_t angleValue,int8_t sizeValue) 
{
    _displayAngle = angleValue;
	_displaySize = sizeValue;
}

/**
 * \函数：clearDisplay
 * \说明：清除显示
 * \输入参数：
 * 		addr - 点阵模块的地址		 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::clearDisplay(int16_t addr) 
{
    int16_t offset;

    if(addr<0 || addr>=_maxDevices)
        return;
    offset=addr*8;
    for(int16_t i=0;i<8;i++) 
	{
        _status[offset+i]=0;
        spiTransfer(addr, i+1,_status[offset+i]);
    }
}

/**
 * \函数：setLed
 * \说明：点阵显示，指定点（行、列）的点亮或灭。
 * \输入参数：
 * 		addr - 点阵模块的地址,8*8点阵单元的地址	
 * 		row - 行的数值 （0~7）
 * 		col - 列的数值 （0~7）
 * 		state - 如果只为 true LED亮，如果为 false LED灭		 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::setLed(int16_t addr, int16_t row, int16_t column, bool state) 
{
    int16_t offset;
    uint8_t val=0x00;

    if(addr<0 || addr>=_maxDevices)
        return;
    if(row<0 || row>7 || column<0 || column>7)
        return;
    offset=addr*8;
    val=0b10000000 >> column;
    if(state)
        _status[offset+row]=_status[offset+row]|val;
    else 
	{
        val=~val;
        _status[offset+row]=_status[offset+row]&val;
    }
    spiTransfer(addr, row+1,_status[offset+row]);
}

/**
 * \函数：setRow
 * \说明：点阵显示，设置一行点阵的显示
 * \输入参数：
 * 		addr - 点阵模块的地址	
 * 		row - 行的数值 （0~7）
 * 		value - 8bit对应于8个LED灯，对应的位为1 LED亮		 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::setRow(int16_t addr, int16_t row, uint8_t value) 
{
    int16_t offset;
    if(addr<0 || addr>= _maxDevices)
        return;
    if(row<0 || row>7)
        return;
    offset=addr*8;
    _status[offset+row]=value;
    spiTransfer(addr, row+1, _status[offset+row]);
}

/**
 * \函数：setColumn
 * \说明：点阵显示，设置一列点阵的显示
 * \输入参数：
 * 		addr - 点阵模块的地址	
 * 		col - 列的数值 （0~7）
 * 		value - 8bit对应于8个LED灯，对应的位为1 LED亮		 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::setColumn(int16_t addr, int16_t col, uint8_t value) 
{
    uint8_t val;

    if(addr<0 || addr>=_maxDevices)
        return;
    if(col<0 || col>7) 
        return;
    for(int16_t row=0;row<8;row++) 
	{
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}


void LedMatrix::spiTransfer(int16_t addr, volatile uint8_t opcode, volatile uint8_t data) 
{
    int16_t offset = addr*2;
    int16_t maxbytes = _maxDevices*2;

    for(int16_t i=0;i < maxbytes;i++)
        _spiData[i]=(uint8_t)0;
	
    //把所发送数据存入spidata[]
    _spiData[offset+1]=opcode;
    _spiData[offset]=data;
     
    digitalWrite(SPI_CS,LOW);		//使能开始
    
    for(int16_t i=maxbytes;i>0;i--)	//发送数据，调用shifOut() 
        shiftOut(SPI_MOSI,SPI_CLK,MSBFIRST,_spiData[i-1]);
    
    digitalWrite(SPI_CS,HIGH);		//传输完成，显示
}  
  
/**
 * \函数：display
 * \说明：点阵显示，显示8*8、16*16 字符、图形、汉字等，输入字模数组。
 * 		  _displayAngle - 0:0°显示; 	1:90°显示; 	
 * 		  _displaySize  - 0:8*8显示;  	1:8*16显示 ;  	2:16*16 显示汉字、图像。 
 *		  
 * \输入参数：
 * 		  addr - 点阵模块的地址：_displaySize=0时addr表示8*8单元的地址，_displaySize=2时表示16*16单元的地址（4个8*8单元为一组）。
 * 		  (*FData)[8] - 字模二维数组指针
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::display(uint8_t addr,uint8_t (*FData)[8]) 
{
	uint8_t offset = addr*4;
	
	if( _displaySize == 2)//16*16 字符、图形显示
	{
		if( _displayAngle == 0) 
		{
			for(uint8_t j=0;j<4;j++)
			{
				for(uint8_t i=0;i<8;i++)
				{
					if(j==0)		setRow(offset,i,(*(FData[j]+i)));
					else if(j==1)	setRow(offset+2,i,(*(FData[j]+i)));
					else if(j==2)	setRow(offset+1,i,(*(FData[j]+i)));
					else 			setRow(offset+3,i,(*(FData[j]+i)));
				}
			}
		}
		else if( _displayAngle == 1)
		{
			for(int16_t j=0;j<4;j++)
			{
				for(int16_t i=0;i<8;i++)
				{
					if(j==0)		setColumn(offset+1,7-i,(*(FData[j]+i)));
					else if(j==1)	setColumn(offset,7-i,(*(FData[j]+i)));
					else if(j==2)	setColumn(offset+3,7-i,(*(FData[j]+i)));
					else 			setColumn(offset+2,7-i,(*(FData[j]+i)));
				}
			}
		}
	}
	
	else if( _displaySize == 0)//8*8 字符、图形显示
	{
		if( _displayAngle == 0) 
		{
			for(uint8_t i=0;i<8;i++)
			{
				setRow(addr,i,(*(FData[0]+i)));	
			}
		}
		
		else if( _displayAngle == 1) 
		{
			uint8_t Data;
			uint8_t aaa = 0b10000000;
			uint8_t a ;
					
			for(uint8_t i=0;i<8;i++)
			{
				setColumn(addr,7-i,(*(FData[0]+i)));	
			}
		}
	}
}


/**
 * \函数：display
 * \说明：点阵显示，显示8*8、8*16 字符
 * 		  _displayAngle - 0:0°显示; 	1:90°显示; 	
 * 		  _displaySize  - 0:8*8显示;  	1:8*16显示 ;  	2:16*16 显示汉字、图像。 	  
 * \输入参数：
 * 		  addr - 点阵模块的地址：_displaySize=0时addr表示8*8单元的地址，_displaySize=1时表示8*16单元的地址（2个8*8单元为一组）。
 * 		  ch   - 显示的字符	 
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::display(uint8_t addr,uint8_t ch) 
{
	uint8_t k=0,offset=0;
	
	if( _displaySize == 1 )//8*16 字符显示
	{
		k = (ch-32) *2;
		offset = addr*2;
		
		if( _displayAngle == 0)
		{
			if( addr%2 == 0)
			{
				for(uint8_t j=0;j<2;j++)
				{
					for(uint8_t i=0;i<8;i++)
					{
						if(j==0)	setRow(offset,i,pgm_read_byte(&F8X16[k][i]));
						if(j==1)	setRow(offset+2,i,pgm_read_byte(&F8X16[k+1][i]));		
					}
				}
			}
			else
			{
				for(uint8_t j=0;j<2;j++)
				{
					for(uint8_t i=0;i<8;i++)
					{
						if(j==0)	setRow(offset-1,i,pgm_read_byte(&F8X16[k][i]));
						if(j==1)	setRow(offset+1,i,pgm_read_byte(&F8X16[k+1][i]));		
					}
				}
			}
		}
		
		else if( _displayAngle == 1) 
		{
			if( addr%2 == 0)
			{
				for(uint8_t j=0;j<2;j++)
				{
					for(uint8_t i=0;i<8;i++)
					{
						if(j==0)	setColumn(offset+1,7-i,pgm_read_byte(&F8X16[k][i]));
						if(j==1)	setColumn(offset,7-i,pgm_read_byte(&F8X16[k+1][i]));		
					}
				}
			}
			else
			{
				for(uint8_t j=0;j<2;j++)
				{
					for(uint8_t i=0;i<8;i++)
					{
						if(j==0)	setColumn(offset+1,7-i,pgm_read_byte(&F8X16[k][i]));
						if(j==1)	setColumn(offset,7-i,pgm_read_byte(&F8X16[k+1][i]));				
					}
				}
			}
		}	
	}
	
	else if( _displaySize == 0)//8*8 字符显示
	{
		k = (ch-32);
		
		if( _displayAngle == 0) 
		{
			for(uint8_t i=0;i<8;i++)
			{
				setRow(addr,i,pgm_read_byte(&F8X8[k][i]));	
			}
		}
		
		else if( _displayAngle == 1) 
		{
			for(uint8_t i=0;i<8;i++)
			{
				setColumn(addr,7-i,pgm_read_byte(&F8X8[k][i]));	
			}
		}
	}
}


/**
 * \函数：display
 * \说明：点阵显示，显示8*8、8*16 字符串
 * \输入参数：
 * 		addr - 点阵模块的地址
 * 		ch - 显示的字符
 * \输出参数：无
 * \返回值：无
 * \其他：无
 */
void LedMatrix::display(uint8_t addr,uint8_t ch[]) 
{
	uint8_t j=0,i = addr;
	while (ch[j]!='\0')
	{
		display(i,ch[j]);
		i++;
		j++;
	}
}




