{"version":3,"sources":["webpack:///webpack/bootstrap d14707f613f27decd9b2","webpack:///./node_modules/q/q.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/renderer/kenrobot.js","webpack:///external \"electron\"","webpack:///external \"path\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","definition","bootstrap","hasStacks","Error","e","stack","qFileName","qStartingLine","captureLine","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","window","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","Function","uncurryThis","f","apply","arguments","QReturnValue","array_slice","Array","slice","array_reduce","reduce","callback","basis","index","this","TypeError","array_indexOf","indexOf","value","array_map","map","thisp","self","collect","undefined","object_create","create","Type","object_defineProperty","obj","prop","descriptor","object_hasOwnProperty","object_keys","keys","key","object_toString","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","source","__minimumStackCounter__","stackCounter","unshift","stackString","lines","split","desiredLines","line","isInternalFrame","stackLine","join","filterStackString","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","Q","Promise","isPromiseAlike","deferred","defer","then","resolve","reject","notify","exception","fulfill","longStackSupport","longStackCounter","resolvedPromise","messages","progressListeners","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reason","progress","progressListener","resolver","race","answerPs","len","fallback","result","inspected","when","fulfilled","rejected","progressed","env","Q_DEBUG","makeNodeResolver","all","passByCopy","x","y","that","spread","makePromise","done","_fulfilled","newException","_rejected","newValue","threw","_progressed","onerror","tap","fcall","thenResolve","thenReject","isPending","isFulfilled","isRejected","alternative","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","rejection","at","emit","atReport","splice","untrackRejection","trackRejection","set","rhs","delete","post","dispatch","promises","pendingCount","snapshot","any","prev","current","err","allResolved","getUnhandledReasons","stopUnhandledRejectionTracking","master","isDef","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","isStopIteration","spawn","promised","del","mapply","send","mcall","invoke","fapply","fbind","concat","console","warn","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","noConflict","webpackPolyfill","deprecate","paths","children","path","ipcRenderer","webFrame","isDev","defaultApp","test","execPath","__dirname","registeredEvents","defers","deferAutoId","onMessage","deferId","type","setZoomFactor","setVisualZoomLevelLimits","setLayoutZoomLevelLimits","hanlderMap","delayTimers","getEventName","target","trigger","hanlders","sort","a","b","options","priority","view","kenrobot","on","listenMessage","canReset","off","delayTrigger","time","timerId","reset","forEach","isPC","require"],"mappings":"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","file":"kenrobot.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./renderer/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/renderer/kenrobot.js\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d14707f613f27decd9b2","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/q/q.js\n// module id = ./node_modules/q/q.js\n// module chunks = 1","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = ./node_modules/webpack/buildin/module.js\n// module chunks = 0 1","const path = require('path')\nconst {ipcRenderer, webFrame} = require('electron')\nconst Q = require('q')\n\nconst isDev = process.defaultApp || /[\\\\/]electron-prebuilt[\\\\/]/.test(process.execPath) || /[\\\\/]electron[\\\\/]/.test(process.execPath)\nmodule.paths.push(isDev ? path.resolve('app', 'node_modules') : path.resolve(__dirname, '..', '..', 'app.asar', 'node_modules'))\n\nlet registeredEvents = []\nlet defers = {}\nlet deferAutoId = 0\n\nwebFrame.setZoomFactor(1)\nwebFrame.setVisualZoomLevelLimits(1, 1)\nwebFrame.setLayoutZoomLevelLimits(0, 0)\n\nfunction onMessage(e, deferId, type, ...args) {\n  let deferred = defers[deferId]\n  if(!deferred) {\n    return\n  }\n\n  let callback\n  if(type === \"notify\") {\n    callback = deferred.notify\n  } else {\n    delete defers[deferId]\n    callback = type ? deferred.resolve : deferred.reject\n  }\n  callback.apply(this, args)\n}\n\nfunction postMessage(name, ...args) {\n  if(registeredEvents.indexOf(name) < 0) {\n    ipcRenderer.on(name, onMessage)\n    registeredEvents.push(name)\n  }\n\n  let deferred = Q.defer()\n  deferAutoId++\n  defers[deferAutoId] = deferred\n\n  ipcRenderer.send.apply(this, [name, deferAutoId].concat(args))\n\n  return deferred.promise\n}\n\nfunction listenMessage(name, callback) {\n  ipcRenderer.on(name, (e, args) => {\n    callback.apply(this, args)\n  })\n\n  return this\n}\n\nlet hanlderMap = {}\nlet delayTimers = {}\n\nfunction getEventName(target, type) {\n  return `${target}_${type}`\n}\n\nfunction on(target, type, callback, options) {\n  options = options || {}\n  options.priority = options.priority || 0\n  options.canReset = options.canReset !== false\n\n  let name = getEventName(target, type)\n  let hanlders = hanlderMap[name]\n  if(!hanlders) {\n    hanlders = []\n    hanlderMap[name] = hanlders\n  }\n  hanlders.push({\n    callback,\n    options,\n  })\n\n  return this\n}\n\nfunction off(target, type, callback) {\n  let name = getEventName(target, type)\n  let hanlders = hanlderMap[name]\n  if(!hanlders) {\n    return this\n  }\n\n  for(let i = 0; i < hanlders.length; i++) {\n    let handler = hanlders[i]\n    if(handler.callback === callback) {\n      hanlders.splice(i, 1)\n      break\n    }\n  }\n\n  return this\n}\n\nfunction trigger(target, type, ...args) {\n  let name = getEventName(target, type)\n  let hanlders = hanlderMap[name]\n  if(!hanlders) {\n    return this\n  }\n\n  hanlders = hanlders.concat().sort((a, b) => b.options.priority - a.options.priority)\n\n  for(let i = 0; i < hanlders.length; i++) {\n    let handler = hanlders[i]\n    handler.callback.apply(this, args)\n  }\n\n  return this\n}\n\nfunction delayTrigger(time, target, type, ...args) {\n  let self = this\n  let name = getEventName(target, type)\n  let timerId = delayTimers[name]\n  timerId && clearTimeout(timerId)\n  timerId = setTimeout(() => {\n    delete delayTimers[name]\n    trigger.apply(self, [target, type].concat(args))\n  }, time)\n  delayTimers[name] = timerId\n\n  return this\n}\n\nlet view = {}\n\nfunction reset() {\n  Object.keys(hanlderMap).forEach(key => {\n    let hanlders = hanlderMap[key]\n    for(let i = hanlders.length - 1; i >= 0; i--) {\n      let hanlder = hanlders[i]\n      if(hanlder.options.canReset) {\n        hanlders.splice(i, 1)\n      }\n    }\n    if(hanlders.length === 0) {\n      delete hanlderMap[key]\n    }\n  })\n\n  Object.keys(delayTimers).forEach(key => {\n    let timerId = delayTimers[key]\n    timerId && clearTimeout(timerId)\n    delete delayTimers[key]\n  })\n  delayTimers = {}\n\n  Object.keys(view).forEach(key => {\n    delete view[key]\n  })\n\n  return this\n}\n\nlet kenrobot = window.kenrobot || (window.kenrobot = {})\nkenrobot.postMessage = postMessage\nkenrobot.listenMessage = listenMessage\n\nkenrobot.on = on\nkenrobot.off = off\n\nkenrobot.trigger = trigger\nkenrobot.delayTrigger = delayTrigger\n\nkenrobot.reset = reset\nkenrobot.view = view\nkenrobot.isPC = true\n\n\n\n// WEBPACK FOOTER //\n// ./src/renderer/kenrobot.js","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = electron\n// module chunks = 1","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = path\n// module chunks = 1"],"sourceRoot":""}